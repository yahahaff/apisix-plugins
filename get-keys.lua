--
-- Licensed to the Apache Software Foundation (ASF) under one or more
-- contributor license agreements.  See the NOTICE file distributed with
-- this work for additional information regarding copyright ownership.
-- The ASF licenses this file to You under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with
-- the License.  You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yahahaff.
--- DateTime: 2022/10/4 15:14
---



-- 在头部引入所需要的模块
local core         =   require("apisix.core")
local etcd         =   require("apisix.core.etcd")



-- 声明插件名称
local plugin_name = "get-keys"

-- 定义插件 schema 格式
local schema = {
    type = "object",
    properties = {
        keys = {type = "string",minLength = 1,maxLength = 1024}
    }
}

-- 插件元数据 schema
local metadata_schema = {
    type = "object",
    properties = {}
}


local _M = {
    version = 0.1,
    priority = 416,
    name = plugin_name,
    schema = schema,
    metadata_schema = metadata_schema
}

-- 检查插件配置是否正确
function _M.check_schema(conf, schema_type)
    if schema_type == core.schema.TYPE_METADATA then
        return core.schema.check(metadata_schema, conf)
    end
    return core.schema.check(schema, conf)
end


-- access执行阶段
function _M.access(conf, ctx)
    core.log.info("Processing access request for client IP validation")
    local value, err = etcd.get("/your_key")
    if value then
        core.log.info("Keys in etcd:")
        for k, v in pairs(value) do
            core.log.info(k .. ": " .. v)
        end
    else
        core.log.error("Error while fetching etcd key: " .. (err or "Unknown error"))
    end
    return 200, { key_values = value }  -- 返回键值对的表
end

-- 日志阶段
function _M.log(conf, ctx)
    core.log.error("Custom plugin " .. plugin_name .. " is processing the request.")
end

return _M
